/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.Models.AttributesTableModel;
import GUI.Models.MyTagsTreeNode;
import GUI.Models.NameSpaceNode;
import GUI.Models.TagsTableModel;
import GUI.Models.TextContentTableModel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import xmlgenerator.NameSpace;
import xmlgenerator.SubTree;
import xmlgenerator.XMLGenerator;

/**
 *
 * @author Anatoly
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        depthMinField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        depthMaxField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        branchMinField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        branchMaxField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        attributeMinField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        attributeMaxField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagsTree = new javax.swing.JTree();
        saveButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        rootTagRegExTextField = new javax.swing.JTextField();
        copyButton = new javax.swing.JButton();
        cutButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        removeSubTreeButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        imperativeAttributesTable = new javax.swing.JTable();
        attrPlusButton = new javax.swing.JButton();
        attrMinusButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        imperativeTagsTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        tagMinusButton = new javax.swing.JButton();
        tagPlusButton = new javax.swing.JButton();
        removeTagButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        textContentTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        namespaceTree = new javax.swing.JTree();
        contentMinusButton = new javax.swing.JButton();
        contentPlusButton = new javax.swing.JButton();
        maximalDepthFileld = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        nsAddButton = new javax.swing.JButton();
        nsViewButton = new javax.swing.JButton();
        nsCutButton = new javax.swing.JButton();
        nsPasteButton = new javax.swing.JButton();
        nsRemoveButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        randomTagsRegExTextField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        randomAttributesRegExTextField = new javax.swing.JTextField();
        randomAttributesValuesRegExTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        selectedNodeTextArea = new javax.swing.JTextArea();
        geteratingIterationCountTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        removeDescendantыButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 550));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("XML Generator");

        jLabel2.setText("Глубина случайных тегов:");

        jLabel4.setText("–");

        jButton1.setText("Сгенерировать!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Кол-во случайных тегов на уровень:");

        branchMinField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchMinFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("–");

        jLabel6.setText("Количество случайных атрибутов:");

        jLabel7.setText("–");

        tagsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagsTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tagsTree);

        saveButton.setText("Сохранить!");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Регулярное выражение для корневой тега генерируемого дерева:");

        copyButton.setText("Копировать");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        cutButton.setText("Вырезать");
        cutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutButtonActionPerformed(evt);
            }
        });

        pasteButton.setText("Вставить");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        removeSubTreeButton.setText("Ветвь");
        removeSubTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSubTreeButtonActionPerformed(evt);
            }
        });

        imperativeAttributesTable.setModel(myAtrributeTableModel);
        jScrollPane3.setViewportView(imperativeAttributesTable);

        attrPlusButton.setText("+");
        attrPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrPlusButtonActionPerformed(evt);
            }
        });

        attrMinusButton.setText("-");
        attrMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrMinusButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Обязательные атрибуты:");

        imperativeTagsTable.setModel(myTagsTableModel);
        jScrollPane4.setViewportView(imperativeTagsTable);

        jLabel10.setText("Обязательные теги:");

        tagMinusButton.setText("-");
        tagMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagMinusButtonActionPerformed(evt);
            }
        });

        tagPlusButton.setText("+");
        tagPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagPlusButtonActionPerformed(evt);
            }
        });

        removeTagButton.setText("Тег");
        removeTagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTagButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Удалить:");

        textContentTable.setModel(myTextContentTableModel);
        jScrollPane5.setViewportView(textContentTable);

        jLabel12.setText("Содержимое:");

        namespaceTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                namespaceTreeMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(namespaceTree);

        contentMinusButton.setText("-");
        contentMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentMinusButtonActionPerformed(evt);
            }
        });

        contentPlusButton.setText("+");
        contentPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentPlusButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Максимальная глубина всего дерева:");

        nsAddButton.setText("Добавить");
        nsAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nsAddButtonActionPerformed(evt);
            }
        });

        nsViewButton.setText("Просмотреть");
        nsViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nsViewButtonActionPerformed(evt);
            }
        });

        nsCutButton.setText("Вырезать");
        nsCutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nsCutButtonActionPerformed(evt);
            }
        });

        nsPasteButton.setText("Вставить");
        nsPasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nsPasteButtonActionPerformed(evt);
            }
        });

        nsRemoveButton.setText("Удалить");
        nsRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nsRemoveButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Регулярные выражения для случайных значений (подстановки: %id%, %digit%, %*%, %?%, %level%):");

        jLabel15.setText("Для тегов:");

        jLabel16.setText("Для атрибутов:");

        jLabel17.setText("Для значений случайных атрибутов:");

        selectedNodeTextArea.setColumns(20);
        selectedNodeTextArea.setRows(5);
        jScrollPane7.setViewportView(selectedNodeTextArea);

        jLabel18.setText("Количество генераций:");

        removeDescendantыButton.setText("Подтеги");
        removeDescendantыButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDescendantыButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(removeDescendantыButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeSubTreeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeTagButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pasteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nsAddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nsViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                            .addComponent(jScrollPane6)
                            .addComponent(nsCutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nsPasteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nsRemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(contentPlusButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(contentMinusButton))
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGap(5, 5, 5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(randomTagsRegExTextField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(attrPlusButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(attrMinusButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(randomAttributesRegExTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addComponent(tagPlusButton)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(tagMinusButton))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(jLabel10)
                                                        .addGap(0, 0, Short.MAX_VALUE))
                                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addGap(99, 99, 99)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                            .addComponent(randomAttributesValuesRegExTextField)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel17)
                                                    .addComponent(jLabel9))
                                                .addGap(0, 0, Short.MAX_VALUE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel14))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(geteratingIterationCountTextField)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton1))
                                            .addComponent(rootTagRegExTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(depthMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(depthMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(branchMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(branchMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(attributeMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel7))
                                            .addComponent(jLabel13))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(maximalDepthFileld, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                                            .addComponent(attributeMaxField))))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(92, 92, 92))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(depthMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addComponent(depthMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(branchMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(branchMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(attributeMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attributeMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(maximalDepthFileld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16))
                                .addGap(7, 7, 7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(randomAttributesValuesRegExTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(randomAttributesRegExTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(randomTagsRegExTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(attrMinusButton)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(attrPlusButton)
                                        .addComponent(tagMinusButton)
                                        .addComponent(tagPlusButton)
                                        .addComponent(contentMinusButton)
                                        .addComponent(contentPlusButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(rootTagRegExTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(removeSubTreeButton)
                                    .addComponent(removeTagButton)
                                    .addComponent(removeDescendantыButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(nsCutButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(copyButton)
                            .addComponent(nsPasteButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cutButton)
                            .addComponent(nsAddButton))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pasteButton)
                            .addComponent(nsViewButton))
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(saveButton)
                    .addComponent(nsRemoveButton)
                    .addComponent(geteratingIterationCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void branchMinFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchMinFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_branchMinFieldActionPerformed

    private boolean inputIsCorrect(){
        
        return true;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean incorrectInputOfRandomParams = false;
        int maxDepth, minDepth, branchMax, branchMin, attrMax, attrMin, globalMaxDepth;
        try{minDepth = Integer.valueOf( depthMinField.getText().trim());}
        catch(NumberFormatException exc){ 
            if (!depthMinField.getText().trim().isEmpty())
                incorrectInputOfRandomParams = true;
            minDepth = 0;}
        try{maxDepth = Integer.valueOf( depthMaxField.getText().trim());}
        catch(NumberFormatException exc){ 
            if (!incorrectInputOfRandomParams)
                if (!depthMaxField.getText().trim().isEmpty())
                    incorrectInputOfRandomParams = true;
            maxDepth = minDepth;
        }
        if(maxDepth < minDepth){
            maxDepth = minDepth = 0;
            incorrectInputOfRandomParams = true;
        }
        try{branchMin = Integer.valueOf( branchMinField.getText().trim());}
        catch(NumberFormatException exc){ 
            if (!incorrectInputOfRandomParams)
                if (!branchMinField.getText().trim().isEmpty())
                    incorrectInputOfRandomParams = true;
            branchMin = 0;
        }
        try{branchMax = Integer.valueOf( branchMaxField.getText().trim());}
        catch(NumberFormatException exc){ 
            if (!incorrectInputOfRandomParams)
                if (!branchMaxField.getText().trim().isEmpty())
                    incorrectInputOfRandomParams = true;
            branchMax = branchMin;
        }
        if(branchMax < branchMin){
            branchMax = branchMin = 0;
            incorrectInputOfRandomParams = true;
        }
        try{attrMin = Integer.valueOf(attributeMinField.getText().trim());}
        catch(NumberFormatException exc){ 
            if (!incorrectInputOfRandomParams)
                if (!attributeMinField.getText().trim().isEmpty())
                    incorrectInputOfRandomParams = true;
            attrMin = 0;
        }
        try{attrMax = Integer.valueOf( attributeMaxField.getText().trim());}
        catch(NumberFormatException exc){ 
            if (!incorrectInputOfRandomParams)
                if (!attributeMaxField.getText().trim().isEmpty())
                    incorrectInputOfRandomParams = true;
            attrMax = attrMin;
        }
        if(attrMax < attrMin){
            attrMax = attrMin = 0;
            incorrectInputOfRandomParams = true;
        }
        if (incorrectInputOfRandomParams)
            ErrorDialog.showErrorDialog("Некорректный ввод!", "Некорректная запись параметров случайных тегов/атрибутов пропущена!");
        try{globalMaxDepth = Integer.valueOf( maximalDepthFileld.getText().trim());}
        catch(NumberFormatException exc){
            if (!maximalDepthFileld.getText().trim().isEmpty()){
                ErrorDialog.showErrorDialog("Некорректный ввод!", "Некорректная запись параметров случайных тегов/атрибутов пропущена!");
                ErrorDialog errDialog = new ErrorDialog(this, true);
                errDialog.setHeader("Некорректный ввод!");
                errDialog.setErrorMessage("Некорректная запись максимальной глубины пропущена!");
                errDialog.setVisible(true);
            }
            globalMaxDepth = Integer.MAX_VALUE;
        }
        String rootName = rootTagRegExTextField.getText().trim();
        if (rootName.isEmpty()){
            ErrorDialog.showErrorDialog("Введите название корневого тега!");
            return;
        }
        HashMap<Integer,HashMap<String, String>> attributesInLevel = new HashMap<>();
        HashMap<String, HashMap<String, String>> attributesOfTags = new HashMap<>();
        HashMap<String, String> attributesInAllLevels = new HashMap<>();
        for (int i = 0; i < imperativeAttributesTable.getRowCount(); i++){
            String attrName = ((String) imperativeAttributesTable.getValueAt(i, 0)).trim();
            String attrValue = ((String) imperativeAttributesTable.getValueAt(i, 1)).trim();
            if (attrName.isEmpty() || attrValue.isEmpty()){
                ErrorDialog.showErrorDialog("Некорректный ввод!", "Строка " + String.valueOf(i+1)+ " таблицы атрибутов заполнена некорректно. Пропуск.");
                continue;
            }
            String levelsAndTags = ((String) imperativeAttributesTable.getValueAt(i, 2)).trim();
            if (levelsAndTags.equals("all") || levelsAndTags.trim().equals(""))
                attributesInAllLevels.put(attrName, attrValue);
            else{
                String[] levelsIntervalsAndPoints = levelsAndTags.split(",");
                ArrayList<Integer> levelsArray = XMLGenerator.getIntegers(levelsIntervalsAndPoints);
                ArrayList<String> tagsArray = XMLGenerator.getTagsInLastGetIntegerCalling();
                for (Integer lvl: levelsArray){
                    HashMap<String, String> attrInThisLevel;
                    if (attributesInLevel.containsKey(lvl))
                        attrInThisLevel = attributesInLevel.get(lvl);
                    else{
                        attrInThisLevel = new HashMap<>();
                        attributesInLevel.put(lvl, attrInThisLevel);
                    }
                    attrInThisLevel.put(attrName, attrValue);
                }
                for (String tag: tagsArray){
                    HashMap<String, String> attrOfThisTag;
                    if (attributesOfTags.containsKey(tag))
                        attrOfThisTag = attributesOfTags.get(tag);
                    else{
                        attrOfThisTag = new HashMap<>();
                        attributesOfTags.put(tag, attrOfThisTag);
                    }
                    attrOfThisTag.put(attrName, attrValue);
                }
            }
        }
        HashMap<Integer, HashMap<String, String[]>> tagsInLevels = new HashMap<>();
        HashMap<String, HashMap<String, String[]>> tagsofParentTags = new HashMap<>();
        HashMap<String, String[]> tagsInAllLevels = new HashMap<>();
        for (int i = 0; i < imperativeTagsTable.getRowCount(); i++){
            String tagName = ((String) imperativeTagsTable.getValueAt(i, 0)).trim();
            String amountInLevelStr = ((String) imperativeTagsTable.getValueAt(i, 1)).trim();
            String[] amountArray = amountInLevelStr.split(",");
            XMLGenerator.getIntegers(amountArray);
            if (tagName.isEmpty() || amountInLevelStr.isEmpty() || !XMLGenerator.getTagsInLastGetIntegerCalling().isEmpty()){
                ErrorDialog.showErrorDialog("Некорректный ввод!", "Строка " + String.valueOf(i+1)+ " таблицы тегов заполнена некорректно. Пропуск.");
                continue;
            }
            String levelsAndTagsStr = (String) imperativeTagsTable.getValueAt(i, 2);
            if (levelsAndTagsStr.equals("all") || levelsAndTagsStr.trim().equals(""))
                tagsInAllLevels.put(tagName,amountArray);
            else{
                String[] levelsArray = levelsAndTagsStr.split(",");
                ArrayList<Integer> levelsOfTag = XMLGenerator.getIntegers(levelsArray);
                ArrayList<String> parentTagsOfTag = XMLGenerator.getTagsInLastGetIntegerCalling();
                for (Integer lvl: levelsOfTag){
                    HashMap<String, String[]> tagsInThisLevel;
                    if (tagsInLevels.containsKey(lvl))
                        tagsInThisLevel = tagsInLevels.get(lvl);
                    else{
                        tagsInThisLevel = new HashMap<>();
                        tagsInLevels.put(lvl, tagsInThisLevel);
                    }
                    tagsInThisLevel.put(tagName, amountArray);
                }
                for (String tag: parentTagsOfTag){
                    HashMap<String, String[]> tagsOfThisParentTag;
                    if (tagsofParentTags.containsKey(tag))
                        tagsOfThisParentTag = tagsofParentTags.get(tag);
                    else{
                        tagsOfThisParentTag = new HashMap<>();
                        tagsofParentTags.put(tag, tagsOfThisParentTag);
                    }
                    tagsOfThisParentTag.put(tagName, amountArray);
                }
            }
        }
        HashMap<Integer, ArrayList<String>> textContentInLevels = new HashMap<>();
        HashMap<String, ArrayList<String>> textContentInTags = new HashMap<>();
        ArrayList<String> textContentInAllLevels = new ArrayList<>();
        for (int i = 0; i < textContentTable.getRowCount(); i++){
            String levelsOrTagsStr = (String) textContentTable.getValueAt(i, 0);
            String textContent = (String) textContentTable.getValueAt(i, 1);
            if (levelsOrTagsStr.equals("all") || levelsOrTagsStr.trim().equals(""))
                textContentInAllLevels.add(textContent);
            else{
                String[] levelsAndTagsArray = levelsOrTagsStr.split(",");
                ArrayList<Integer> levelsOfTextContent = XMLGenerator.getIntegers(levelsAndTagsArray);
                ArrayList<String> tagsOfTextContent = XMLGenerator.getTagsInLastGetIntegerCalling();
                for (Integer lvl: levelsOfTextContent){
                    ArrayList<String> textContentOfThisLevel;
                    if (textContentInLevels.containsKey(lvl))
                        textContentOfThisLevel = textContentInLevels.get(lvl);
                    else{
                        textContentOfThisLevel = new ArrayList<>();
                        textContentInLevels.put(lvl, textContentOfThisLevel);
                    }
                    textContentOfThisLevel.add(textContent);
                }
                for (String tag: tagsOfTextContent){
                    ArrayList<String> textContentOfThisTag;
                    if (textContentInTags.containsKey(tag))
                        textContentOfThisTag = textContentInTags.get(tag);
                    else{
                        textContentOfThisTag = new ArrayList<>();
                        textContentInTags.put(tag, textContentOfThisTag);
                    }
                    textContentOfThisTag.add(textContent);
                }
            }
        }
        int iterCount = 1;
        try{iterCount = Integer.valueOf(geteratingIterationCountTextField.getText().trim());}
        catch(NumberFormatException exc){
            if (!geteratingIterationCountTextField.getText().trim().isEmpty())
                ErrorDialog.showErrorDialog("Некорректный ввод!", "Некорректная запись количества генераций пропущена!");
            globalMaxDepth = Integer.MAX_VALUE;
        }
        for (int i = 0; i < iterCount; i++){
            SubTree xmlTree = new SubTree(SubTree.getStringByRegularExpression(rootName));
            xmlTree.setGlobalMaximunDepth(globalMaxDepth);
            String randomTagsRexEx = randomTagsRegExTextField.getText().trim();
            xmlTree.fill(minDepth, maxDepth, branchMin, branchMax, randomTagsRexEx);
            xmlTree.setImperativeTags(tagsInLevels, tagsInAllLevels, tagsofParentTags);
            String randomAttributesRegEx = randomAttributesRegExTextField.getText().trim();
            String randomAttributesValuesRegEx = randomAttributesValuesRegExTextField.getText().trim();
            xmlTree.setIncidentalAttributes(attrMin, attrMax, randomAttributesRegEx, randomAttributesValuesRegEx); 
            xmlTree.setImperativeAttributes(attributesInLevel, attributesInAllLevels, attributesOfTags);
            xmlTree.setTextContent(textContentInLevels, textContentInAllLevels, textContentInTags);
            root.addChild(xmlTree);
        }
        updateTree();
        this.updateNameSpaceTree();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void removeSubTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSubTreeButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree remNode = TC.getAssociatedNode();
        if (remNode == root)
            return;
        MyTagsTreeNode prnt = (MyTagsTreeNode) TC.getParent();
        SubTree prntNode = prnt.getAssociatedNode();
        prntNode.removeChild(remNode);
        updateTree();
        tagCopyIsPressed = false;
        tagCutIsPressed = false;
        selectedNodeTextArea.setText("");
    }//GEN-LAST:event_removeSubTreeButtonActionPerformed
    
    private boolean tagCopyIsPressed = false;
    private SubTree selectedSubTree = null;
    private SubTree selectedSubTreeParent = null;
    private boolean tagCutIsPressed = false;
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (selectedNode == root){
            tagCopyIsPressed = false;
            tagCutIsPressed = false;
            return;
        }
        selectedSubTree = selectedNode;
        selectedSubTreeParent = ((MyTagsTreeNode)TC.getParent()).getAssociatedNode();
        tagCopyIsPressed = true;
        tagCutIsPressed = false;
    }//GEN-LAST:event_copyButtonActionPerformed

    private void cutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutButtonActionPerformed
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (selectedNode == root){
            return;
        }
        selectedSubTree = selectedNode;
        selectedSubTreeParent = ((MyTagsTreeNode)TC.getParent()).getAssociatedNode();
        tagCopyIsPressed = false;
        tagCutIsPressed = true;
    }//GEN-LAST:event_cutButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)
            return;
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        SubTree copyOfSelectedSubTree = selectedSubTree.getCopy();
        if (tagCopyIsPressed || tagCutIsPressed)
            selectedNode.addChild(copyOfSelectedSubTree);
        if (tagCutIsPressed)
            selectedSubTreeParent.removeChild(selectedSubTree);
        tagCopyIsPressed = false;
        tagCutIsPressed = false;
        updateTree();
        selectedNodeTextArea.setText("");
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void tagsTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagsTreeMouseClicked
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null){
            disableAllTagTreeButtons();
            selectedNodeTextArea.setText("");
            return;
        }
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (selectedNode == root){
            pasteButton.setEnabled(tagCutIsPressed || tagCopyIsPressed);
            removeSubTreeButton.setEnabled(false);
            removeTagButton.setEnabled(false);
            copyButton.setEnabled(false);
            cutButton.setEnabled(false);
            selectedNodeTextArea.setText("this is a root");
            saveButton.setEnabled(true);
            removeDescendantыButton.setEnabled(true);
        }
        else {
            pasteButton.setEnabled(tagCutIsPressed || tagCopyIsPressed);
            removeSubTreeButton.setEnabled(true);
            removeTagButton.setEnabled(true);
            copyButton.setEnabled(true);
            cutButton.setEnabled(true);
            saveButton.setEnabled(true);
            removeDescendantыButton.setEnabled(true);
            selectedNodeTextArea.setText("");
            selectedNodeTextArea.append("\tTextContent: \n\"" + selectedNode.getTextContent() + "\"\n");
            selectedNodeTextArea.append("\tAttributes:\n");
            selectedNodeTextArea.append(selectedNode.getAttributesLines());
        }
    }//GEN-LAST:event_tagsTreeMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        try {
            Document xmlDoc = selectedNode.toDocument();
            XMLGenerator.writeDocument(xmlDoc);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        pasteButton.setEnabled(false);
        tagCutIsPressed = false;
        tagCopyIsPressed = false;
    }//GEN-LAST:event_saveButtonActionPerformed

    private final AttributesTableModel myAtrributeTableModel = new AttributesTableModel();
    private final TagsTableModel myTagsTableModel = new TagsTableModel();
    private final TextContentTableModel myTextContentTableModel = new TextContentTableModel();
    private void attrPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrPlusButtonActionPerformed
        // TODO add your handling code here:
        myAtrributeTableModel.addRow();
    }//GEN-LAST:event_attrPlusButtonActionPerformed

    private void attrMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrMinusButtonActionPerformed
        // TODO add your handling code here:
        int rowIndex = imperativeAttributesTable.getSelectedRow();
        if (rowIndex > -1)
            myAtrributeTableModel.removeRow(rowIndex);
    }//GEN-LAST:event_attrMinusButtonActionPerformed

    private void tagPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagPlusButtonActionPerformed
        // TODO add your handling code here:
        myTagsTableModel.addRow();
    }//GEN-LAST:event_tagPlusButtonActionPerformed

    private void tagMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagMinusButtonActionPerformed
        // TODO add your handling code here:
        int rowIndex = imperativeTagsTable.getSelectedRow();
        if (rowIndex > -1)
            myTagsTableModel.removeRow(rowIndex);
    }//GEN-LAST:event_tagMinusButtonActionPerformed

    private void removeTagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTagButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTagsTreeNode TC = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree remNode = TC.getAssociatedNode();
        if (remNode == root)
            return;
        MyTagsTreeNode prnt = (MyTagsTreeNode) TC.getParent();
        SubTree prntNode = prnt.getAssociatedNode();
        prntNode.removeChild(remNode);  
        for (SubTree remNodeChild: remNode.getChildNodes())
            prntNode.addChild(remNodeChild);
        updateTree();
        tagCopyIsPressed = false;
        tagCutIsPressed = false;
        selectedNodeTextArea.setText("");
    }//GEN-LAST:event_removeTagButtonActionPerformed

    private void contentPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentPlusButtonActionPerformed
        // TODO add your handling code here:
        myTextContentTableModel.addRow();
    }//GEN-LAST:event_contentPlusButtonActionPerformed

    private void contentMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentMinusButtonActionPerformed
        // TODO add your handling code here:
        int rowIndex = textContentTable.getSelectedRow();
        if (rowIndex > -1)
            myTextContentTableModel.removeRow(rowIndex);
    }//GEN-LAST:event_contentMinusButtonActionPerformed

    
    private void nsAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nsAddButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = namespaceTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        NameSpaceNode TC = (NameSpaceNode)TP.getLastPathComponent();
        NameSpace selectedNode = TC.getAssociatedNameSpace();
        NameSpaceDialog nsd = new NameSpaceDialog(this, true);
        nsd.setVisible(true);
        NameSpace ns = nsd.getNS();
        if (ns.getSetName().equals(""))
            return;
        selectedNode.addChildNameSpace(ns);
        updateNameSpaceTree();
    }//GEN-LAST:event_nsAddButtonActionPerformed

    private void nsViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nsViewButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = namespaceTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        NameSpaceNode TC = (NameSpaceNode)TP.getLastPathComponent();
        NameSpace selectedNode = TC.getAssociatedNameSpace();
        NameSpaceDialog nsd = new NameSpaceDialog(this, true, selectedNode);
        nsd.setVisible(true);
        updateNameSpaceTree();
    }//GEN-LAST:event_nsViewButtonActionPerformed

    private boolean nsCutIsPressed = false;
    private NameSpace selectedNS = null;
    private NameSpace selectedNSParent = null;
    private void nsCutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nsCutButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = namespaceTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        NameSpaceNode TC = (NameSpaceNode)TP.getLastPathComponent();
        selectedNS = TC.getAssociatedNameSpace();
        if (selectedNS == nsRoot){
            return;
        }
        selectedNSParent = ((NameSpaceNode)TC.getParent()).getAssociatedNameSpace();
        nsCutIsPressed = true;
    }//GEN-LAST:event_nsCutButtonActionPerformed

    private void nsPasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nsPasteButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = namespaceTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        NameSpaceNode TC = (NameSpaceNode)TP.getLastPathComponent();
        NameSpace newPrnt = TC.getAssociatedNameSpace();
        selectedNSParent.getChildNameSpaces().remove(selectedNS);
        NameSpace copyOfSelectedNS = selectedNS.getCopy();
        newPrnt.addChildNameSpace(copyOfSelectedNS);
        nsCutIsPressed = false;
        updateNameSpaceTree();
    }//GEN-LAST:event_nsPasteButtonActionPerformed

    private void nsRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nsRemoveButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = namespaceTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        NameSpaceNode TC = (NameSpaceNode)TP.getLastPathComponent();
        NameSpace toRem = TC.getAssociatedNameSpace();
        NameSpace parent = ((NameSpaceNode)TC.getParent()).getAssociatedNameSpace();
        parent.getChildNameSpaces().remove(toRem);
        nsCutIsPressed = false;
        updateNameSpaceTree();
    }//GEN-LAST:event_nsRemoveButtonActionPerformed

    private void namespaceTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_namespaceTreeMouseClicked
        // TODO add your handling code here:
        TreeSelectionModel TSM = namespaceTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null){
            nsCutButton.setEnabled(false);
            nsRemoveButton.setEnabled(false);
            nsPasteButton.setEnabled(false);
            nsViewButton.setEnabled(false);
            nsAddButton.setEnabled(false);
            return;
        }
        
        NameSpaceNode TC = (NameSpaceNode)TP.getLastPathComponent();
        NameSpace selectedNode = TC.getAssociatedNameSpace();
        if (selectedNode == nsRoot){
            nsCutButton.setEnabled(false);
            nsPasteButton.setEnabled(nsCutIsPressed);
            nsRemoveButton.setEnabled(false);
            nsViewButton.setEnabled(true);
            nsAddButton.setEnabled(true);
        }
        else{
            nsCutButton.setEnabled(true);
            nsPasteButton.setEnabled(nsCutIsPressed);
            nsRemoveButton.setEnabled(true);
            nsViewButton.setEnabled(true);
            nsAddButton.setEnabled(true);
        }
    }//GEN-LAST:event_namespaceTreeMouseClicked

    private void removeDescendantыButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDescendantыButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = tagsTree.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)
        return;
        MyTagsTreeNode selectedJTreeNode = (MyTagsTreeNode)TP.getLastPathComponent();
        SubTree selectedTagSubTree = selectedJTreeNode.getAssociatedNode();
        selectedTagSubTree.removeAllChilds();
        updateTree();
        tagCopyIsPressed = false;
        tagCutIsPressed = false;
        selectedNodeTextArea.setText("");
    }//GEN-LAST:event_removeDescendantыButtonActionPerformed
    
    private SubTree root = new SubTree();
    public static NameSpace nsRoot = new NameSpace("names"); 
    private MyTagsTreeNode jTreeRoot = new MyTagsTreeNode();
    private NameSpaceNode nsTreeRoot = new NameSpaceNode(nsRoot);
    private MyTagsTreeNode getTreeNode(SubTree node){
        ArrayList<SubTree> childNodes = node.getChildNodes();
        MyTagsTreeNode root = new MyTagsTreeNode(node.getTag()); 
        
        root.associateWithNode(node);
        for (SubTree child: childNodes){
            MyTagsTreeNode childNode = getTreeNode(child);
            root.add(childNode);
        }
        return root;
    }
    private NameSpaceNode getNameSpaceNode(NameSpace node){
        ArrayList<NameSpace> childNodes = node.getChildNameSpaces();
        NameSpaceNode root = new NameSpaceNode(node.getSetName()); 
        
        root.associateWithNameSpace(node);
        for (NameSpace child: childNodes){
            NameSpaceNode childNode = getNameSpaceNode(child);
            root.add(childNode);
        }
        return root;
    }
    private void updateTree(){
        jTreeRoot = getTreeNode(root);
        tagsTree.setModel(new DefaultTreeModel(jTreeRoot));
        disableAllTagTreeButtons();
    }
    private void disableAllTagTreeButtons(){
        pasteButton.setEnabled(false);
        removeSubTreeButton.setEnabled(false);
        removeTagButton.setEnabled(false);
        copyButton.setEnabled(false);
        cutButton.setEnabled(false);
        saveButton.setEnabled(false);
        removeDescendantыButton.setEnabled(false);
    }
    private void updateNameSpaceTree(){
        nsTreeRoot = getNameSpaceNode(nsRoot);
        namespaceTree.setModel(new DefaultTreeModel(nsTreeRoot));
        nsCutButton.setEnabled(false);
        nsPasteButton.setEnabled(false);
        nsRemoveButton.setEnabled(false);
        nsViewButton.setEnabled(false);
        nsAddButton.setEnabled(false);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame mainFr = new MainFrame();
                mainFr.updateTree();
                mainFr.updateNameSpaceTree();
                mainFr.selectedNodeTextArea.setEditable(false);
                mainFr.selectedNodeTextArea.setLineWrap(true);
                mainFr.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attrMinusButton;
    private javax.swing.JButton attrPlusButton;
    private javax.swing.JTextField attributeMaxField;
    private javax.swing.JTextField attributeMinField;
    private javax.swing.JTextField branchMaxField;
    private javax.swing.JTextField branchMinField;
    private javax.swing.JButton contentMinusButton;
    private javax.swing.JButton contentPlusButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton cutButton;
    private javax.swing.JTextField depthMaxField;
    private javax.swing.JTextField depthMinField;
    private javax.swing.JTextField geteratingIterationCountTextField;
    private javax.swing.JTable imperativeAttributesTable;
    private javax.swing.JTable imperativeTagsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextField maximalDepthFileld;
    private javax.swing.JTree namespaceTree;
    private javax.swing.JButton nsAddButton;
    private javax.swing.JButton nsCutButton;
    private javax.swing.JButton nsPasteButton;
    private javax.swing.JButton nsRemoveButton;
    private javax.swing.JButton nsViewButton;
    private javax.swing.JButton pasteButton;
    private javax.swing.JTextField randomAttributesRegExTextField;
    private javax.swing.JTextField randomAttributesValuesRegExTextField;
    private javax.swing.JTextField randomTagsRegExTextField;
    private javax.swing.JButton removeDescendantыButton;
    private javax.swing.JButton removeSubTreeButton;
    private javax.swing.JButton removeTagButton;
    private javax.swing.JTextField rootTagRegExTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea selectedNodeTextArea;
    private javax.swing.JButton tagMinusButton;
    private javax.swing.JButton tagPlusButton;
    private javax.swing.JTree tagsTree;
    private javax.swing.JTable textContentTable;
    // End of variables declaration//GEN-END:variables
}
