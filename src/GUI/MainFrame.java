/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.Models.AttributesTableModel;
import GUI.Models.MyTreeNode;
import GUI.Models.TagsTableModel;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import xmlgenerator.SubTree;
import xmlgenerator.XMLGenerator;

/**
 *
 * @author Anatoly
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        depthMinField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        depthMaxField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        branchMinField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        branchMaxField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        attributeMaxField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        attributeMinField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        saveButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        copyButton = new javax.swing.JButton();
        cutButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedNodeTextPane = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        imperativeAttributesTable = new javax.swing.JTable();
        attrPlusButton = new javax.swing.JButton();
        attrMinusButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        imperativeTagsTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        tagMinusButton = new javax.swing.JButton();
        tagPlusButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("XML Generator");

        jLabel2.setText("Глубина случайных тегов:");

        jLabel4.setText("–");

        jButton1.setText("Сгенерировать!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Количество случайных тегов на уровень:");

        branchMinField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchMinFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("–");

        jLabel6.setText("Количество случайных атрибутов:");

        jLabel7.setText("–");

        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        saveButton.setText("Сохранить!");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Название:");

        copyButton.setText("Копировать");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        cutButton.setText("Вырезать");
        cutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutButtonActionPerformed(evt);
            }
        });

        pasteButton.setText("Вставить");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Удалить");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(selectedNodeTextPane);

        imperativeAttributesTable.setModel(myAtrributeTableModel);
        jScrollPane3.setViewportView(imperativeAttributesTable);

        attrPlusButton.setText("+");
        attrPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrPlusButtonActionPerformed(evt);
            }
        });

        attrMinusButton.setText("-");
        attrMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attrMinusButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Обязательные атрибуты:");

        imperativeTagsTable.setModel(myTagsTableModel);
        jScrollPane4.setViewportView(imperativeTagsTable);

        jLabel10.setText("Обязательные теги:");

        tagMinusButton.setText("-");
        tagMinusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagMinusButtonActionPerformed(evt);
            }
        });

        tagPlusButton.setText("+");
        tagPlusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagPlusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cutButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(copyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(pasteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(attrPlusButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(attrMinusButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(attributeMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(attributeMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(97, 97, 97))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depthMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(depthMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(branchMinField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(branchMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(246, 246, 246))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(tagPlusButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tagMinusButton))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(10, 10, 10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 209, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                        .addGap(13, 13, 13)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton)
                        .addGap(7, 7, 7)
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cutButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(depthMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(depthMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(branchMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(branchMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(attributeMinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(attributeMaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(attrMinusButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(attrPlusButton)
                                .addComponent(tagMinusButton)
                                .addComponent(tagPlusButton)))
                        .addGap(54, 54, 54)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pasteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void branchMinFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchMinFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_branchMinFieldActionPerformed

    private boolean inputIsCorrect(){
        
        return true;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!inputIsCorrect()){
            ErrorDialog errDialog = new ErrorDialog(this, true);
            errDialog.setVisible(true);
            return;
        }
        System.out.println(depthMaxField.getText());
        System.out.println(depthMinField.getText());
        System.out.println(branchMaxField.getText());
        System.out.println(branchMinField.getText());
        System.out.println(attributeMaxField.getText());
        System.out.println(attributeMinField.getText());
        int maxDepth = Integer.valueOf(depthMaxField.getText());
        int minDepth = Integer.valueOf(depthMinField.getText());
        int branchMax = Integer.valueOf(branchMaxField.getText());
        int branchMin = Integer.valueOf(branchMinField.getText());
        int attrMax = Integer.valueOf(attributeMaxField.getText());
        int attrMin = Integer.valueOf(attributeMinField.getText());
        String rootName = nameTextField.getText();
        HashMap<Integer,HashMap<String, String>> attributesInLevel = new HashMap<>();
        HashMap<String, String> attributesInAllLevels = new HashMap<>();
        for (int i = 0; i < imperativeAttributesTable.getRowCount(); i++){
            String attrName = (String) imperativeAttributesTable.getValueAt(i, 0);
            String attrValue = (String) imperativeAttributesTable.getValueAt(i, 1);
            String levels = (String) imperativeAttributesTable.getValueAt(i, 2);
            if (levels == null || levels.equals("all") || levels.trim().equals(""))
                attributesInAllLevels.put(attrName, attrValue);
            else{
                String[] levelsArray = levels.split(",");
                for (String lvlStr: levelsArray){
                    Integer lvl = Integer.valueOf(lvlStr.trim());
                    HashMap<String, String> attrInThisLevel;
                    if (attributesInLevel.containsKey(lvl))
                        attrInThisLevel = attributesInLevel.get(lvl);
                    else{
                        attrInThisLevel = new HashMap<>();
                        attributesInLevel.put(lvl, attrInThisLevel);
                    }
                    attrInThisLevel.put(attrName, attrValue);
                }
            }
        }
        HashMap<Integer, HashMap<String, String[]>> tagsInLevels = new HashMap<>();
        HashMap<String, String[]> tagsInAllLevels = new HashMap<>();
        for (int i = 0; i < imperativeTagsTable.getRowCount(); i++){
            String tagName = (String) imperativeTagsTable.getValueAt(i, 0);
            String amountInLevelStr = (String) imperativeTagsTable.getValueAt(i, 1);
            String[] amountInLevelArray = amountInLevelStr.split(",");
            String levelsStr = (String) imperativeTagsTable.getValueAt(i, 2);
            if (levelsStr == null || levelsStr.equals("all") || levelsStr.trim().equals(""))
                tagsInAllLevels.put(tagName,amountInLevelArray);
            else{
                String[] levelsArray = levelsStr.split(",");
                ArrayList<Integer> levelsOfTag = XMLGenerator.getIntegers(levelsArray);
                for (Integer lvl: levelsOfTag){
                    HashMap<String, String[]> tagsInThisLevel;
                    if (tagsInLevels.containsKey(lvl))
                        tagsInThisLevel = tagsInLevels.get(lvl);
                    else{
                        tagsInThisLevel = new HashMap<>();
                        tagsInLevels.put(lvl, tagsInThisLevel);
                    }
                    tagsInThisLevel.put(tagName, amountInLevelArray);
                }
            }
        }
        SubTree xmlTree = new SubTree(rootName);
        xmlTree.fill(minDepth, maxDepth, branchMin, branchMax);
        xmlTree.setImperativeTags(tagsInLevels, tagsInAllLevels);
        xmlTree.setIncidentalAttributes(attrMax, attrMin);
        xmlTree.setImperativeAttributes(attributesInLevel, attributesInAllLevels);
        root.addChild(xmlTree);
        updateTree();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = jTree1.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTreeNode TC = (MyTreeNode)TP.getLastPathComponent();
        SubTree remNode = TC.getAssociatedNode();
        if (remNode == root)
            return;
        MyTreeNode prnt = (MyTreeNode) TC.getParent();
        SubTree prntNode = prnt.getAssociatedNode();
        prntNode.removeChild(remNode);
        updateTree();
        copyIsPressed = false;
        cutIsPressed = false;
    }//GEN-LAST:event_removeButtonActionPerformed

    
    private boolean copyIsPressed = false;
    private SubTree selectedSubTree = null;
    private SubTree selectedSubTreeParent = null;
    private boolean cutIsPressed = false;
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = jTree1.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTreeNode TC = (MyTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (selectedNode == root){
            copyIsPressed = false;
            cutIsPressed = false;
            return;
        }
        selectedSubTree = selectedNode;
        selectedSubTreeParent = ((MyTreeNode)TC.getParent()).getAssociatedNode();
        copyIsPressed = true;
        cutIsPressed = false;
    }//GEN-LAST:event_copyButtonActionPerformed

    private void cutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutButtonActionPerformed
        TreeSelectionModel TSM = jTree1.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)  
            return;
        MyTreeNode TC = (MyTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (selectedNode == root){
            copyIsPressed = false;
            cutIsPressed = false;
            return;
        }
        selectedSubTree = selectedNode;
        selectedSubTreeParent = ((MyTreeNode)TC.getParent()).getAssociatedNode();
        copyIsPressed = false;
        cutIsPressed = true;
    }//GEN-LAST:event_cutButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        TreeSelectionModel TSM = jTree1.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null)
            return;
        MyTreeNode TC = (MyTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (copyIsPressed || cutIsPressed)
            selectedNode.addChild(selectedSubTree);
        if (cutIsPressed)
            selectedSubTreeParent.removeChild(selectedSubTree);
        copyIsPressed = false;
        cutIsPressed = false;
        updateTree();
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        TreeSelectionModel TSM = jTree1.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        if (TP == null){
            pasteButton.setEnabled(false);
            removeButton.setEnabled(false);
            copyButton.setEnabled(false);
            cutButton.setEnabled(false);
            saveButton.setEnabled(false);
            selectedNodeTextPane.setText("");
            return;
        }
        MyTreeNode TC = (MyTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        if (selectedNode == root){
            pasteButton.setEnabled(cutIsPressed || copyIsPressed);
            removeButton.setEnabled(false);
            copyButton.setEnabled(false);
            cutButton.setEnabled(false);
            selectedNodeTextPane.setText("this is a root");
            saveButton.setEnabled(false);
        }
        else {
            pasteButton.setEnabled(cutIsPressed || copyIsPressed);
            removeButton.setEnabled(true);
            copyButton.setEnabled(true);
            cutButton.setEnabled(true);
            saveButton.setEnabled(true);
            selectedNodeTextPane.setText("TextContent: "+selectedNode.getTextContent() + "\nAttributes: " + selectedNode.getAttributes());
        }
    }//GEN-LAST:event_jTree1MouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        TreeSelectionModel TSM = jTree1.getSelectionModel();
        TreePath TP = TSM.getSelectionPath();
        MyTreeNode TC = (MyTreeNode)TP.getLastPathComponent();
        SubTree selectedNode = TC.getAssociatedNode();
        try {
            Document xmlDoc = selectedNode.toDocument();
            XMLGenerator.writeDocument(xmlDoc);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private final AttributesTableModel myAtrributeTableModel = new AttributesTableModel();
    private final TagsTableModel myTagsTableModel = new TagsTableModel();
    private void attrPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrPlusButtonActionPerformed
        // TODO add your handling code here:
        myAtrributeTableModel.addRow();
    }//GEN-LAST:event_attrPlusButtonActionPerformed

    private void attrMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attrMinusButtonActionPerformed
        // TODO add your handling code here:
        int rowIndex = imperativeAttributesTable.getSelectedRow();
        if (rowIndex > -1)
            myAtrributeTableModel.removeRow(rowIndex);
    }//GEN-LAST:event_attrMinusButtonActionPerformed

    private void tagPlusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagPlusButtonActionPerformed
        // TODO add your handling code here:
        myTagsTableModel.addRow();
    }//GEN-LAST:event_tagPlusButtonActionPerformed

    private void tagMinusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagMinusButtonActionPerformed
        // TODO add your handling code here:
        int rowIndex = imperativeTagsTable.getSelectedRow();
        if (rowIndex > -1)
            myTagsTableModel.removeRow(rowIndex);
    }//GEN-LAST:event_tagMinusButtonActionPerformed
    
    private SubTree root = new SubTree();
    private MyTreeNode jTreeRoot= new MyTreeNode();
    private MyTreeNode getTreeNode(SubTree node){
        ArrayList<SubTree> childNodes = node.getChildNodes();
        MyTreeNode root = new MyTreeNode(node.getTag()); 
        
        root.associateWithNode(node);
        for (SubTree child: childNodes){
            MyTreeNode childNode = getTreeNode(child);
            root.add(childNode);
        }
        return root;
    }
    private void updateTree(){
        jTreeRoot = getTreeNode(root);
        jTree1.setModel(new DefaultTreeModel(jTreeRoot));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame mainFr = new MainFrame();
                mainFr.updateTree();
                mainFr.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton attrMinusButton;
    private javax.swing.JButton attrPlusButton;
    private javax.swing.JTextField attributeMaxField;
    private javax.swing.JTextField attributeMinField;
    private javax.swing.JTextField branchMaxField;
    private javax.swing.JTextField branchMinField;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton cutButton;
    private javax.swing.JTextField depthMaxField;
    private javax.swing.JTextField depthMinField;
    private javax.swing.JTable imperativeAttributesTable;
    private javax.swing.JTable imperativeTagsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextPane selectedNodeTextPane;
    private javax.swing.JButton tagMinusButton;
    private javax.swing.JButton tagPlusButton;
    // End of variables declaration//GEN-END:variables
}
